const babel = require("@babel/core");
const path = require("path");
const fs = require("fs");
const { uniteGaladrielAST } = require(path.join(__dirname, "..", "..", "build", "src", "ast", "uniteGaladrielAST.js"));
const { coreAST } = require(path.join(__dirname, "..", "..", "build", "src", "ast", "coreAST.js"));
const { modularAST } = require(path.join(__dirname, "..", "..", "build", "src", "ast", "modularAST.js"));

/**
 * Clears the arrays within a nested object representing an Abstract Syntax Tree (AST).
 *
 * @param {Record<string, Record<string, string[]>} ast - The AST to be modified.
 */
function clearAstElements(ast) {
    try {
        // loops through ast properties
        for (const item in ast) {
            // loops through property's element
            for (const element in ast[item]) {
                // clear the array
                ast[item][element].length = 0;
            }
        }
    } catch (error) {
        console.error("An error occurred:", error);
    }
}

function generateCSSfile(codeString, filePath, output, module) {
    // if module and modularAST are valid
    if (module) {
        // clear the modular ast
        clearAstElements(modularAST);
    }

    const transpiledCode = babel.transformSync(codeString, {
        filename: filePath,
        configFile: path.join(__dirname, "..", "..", "src", "babel.internal.config.js")
    });

    if (transpiledCode) {
        const contentCSS = uniteGaladrielAST(module ? modularAST : coreAST);
        const __output = module ? `${filePath.split(".")[0]}.css`: output;

        fs.writeFileSync(path.resolve(__output), contentCSS);

        if (module) {
            const importPath = path.basename(filePath).split(".")[0];
            const importString = `// Importing the CSS file generated by Galadriel.js\nimport './${importPath}.css';\n`;

            if (codeString.includes(importString)) return;

            const splittedLines = codeString.split("\n");
            const lastImportIdx = splittedLines.findIndex(
                line => !line.trim().startsWith("import") && !line.trim().startsWith("//")
            );

            splittedLines.splice(lastImportIdx > -1 ? lastImportIdx + 1 : 0, 0, importString);
            fs.writeFileSync(path.resolve(filePath), splittedLines.join("\n"));
        }
    }
}

module.exports = { generateCSSfile };
